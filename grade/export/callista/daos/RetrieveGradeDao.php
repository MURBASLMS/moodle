<?php

/**
 * RetrieveGradeDao is used to request students who have a certain grade based on UOO ID's to the Callista web service and to handle and interpret the response.
 *
 * @copyright  2015 onwards NetSpot
 * @author tlock
 */
class RetrieveGradeDao {
    //The URI for the wsdl file defining the web service.
    private $wsdllocation;

    //A regular expression for the SoapFault thrown when the wsdl file cannot be found.
    private $missingwsdlregex;

    // Associated course id
    private $courseid;

    function __construct($courseid) {
        global $CFG;

        $this->courseid = $courseid;

        $currentwdsl = get_config('local_callista', 'orawsvwsdlsuffix');
        $this->wsdllocation = $CFG->dirroot . "/local/callista/orawsv_wsdl{$currentwdsl}.xml";
        $this->missingwsdlregex = '/^SOAP-ERROR: Parsing WSDL: Couldn\'t load from \'.*?\'/';
    }

    /**
     * Prepares and sends the request to the Callista web service using the SoapClient class. Afterwards, the response data
     * is processed and returned.
     * @param string $grade Grade to request
     * @return \stdClass $grades Grades for students and associated UOO.
     */
    public function retrieve_grades($grade) {
        $uoo = new OfferingsDao;
        $uoos = $uoo->get_unit_offerings($this->courseid);
        $grades = new StdClass();
        $grades->data = array();
        $errors = array();
        $prsltload = $this->get_soap_prsltload($uoos, $grade);

        $htuser = get_config('local_callista', 'wsuser');
        $htpass = get_config('local_callista', 'wspass');
        $options = array(
            'trace' => true,
            'features' => SOAP_SINGLE_ELEMENT_ARRAYS,
            'cache_wsdl' => WSDL_CACHE_NONE,
        );
        if (!empty($htuser)) {
            $options['login'] = $htuser;
        }
        if (!empty($htpass)) {
            $options['password'] = $htpass;
        }
        $soapClient = new SoapClient($this->wsdllocation, $options);

        try {
            $responseobject = $soapClient->XMLFromQuery($prsltload);

            //extract the results
            $grades->data = $this->extract_results_from_response($responseobject, $uoos, $grade);
        } catch (Exception $exception) {
            $errors[] = $exception->getMessage();
        }
        $grades->errors = $errors;
        return $grades;
    }

    /**
     * Builds a stdClass object using UOO ID's that the SoapClient can convert into XML matching the schema in the wsdl file
     * for the web service.
     * @param array $uoos List of UOO ID's to query
     * @param string $grade Grade to request
     * @return \SoapVar
     */
    private function get_soap_prsltload($uoos, $grade) {

        $tns = 'http://xmlns.oracle.com/orawsv';
        $cdata = "<ns1:query_text type=\"SQL\">
                      <![CDATA[SELECT uoo_id, person_id, mark FROM sua_inq_v
                                 WHERE grade = '$grade'
                                   AND uoo_id IN (" . implode(",", array_keys($uoos)) . ")]]>
                  </ns1:query_text>";

        $cdatasoapvar = new SoapVar($cdata, XSD_ANYXML, 'SQL', null, 'query_text', $tns);
        $obj = new SoapVar(array($cdatasoapvar), SOAP_ENC_OBJECT, null, null, 'query', $tns);
        return $obj;
    }

    /**
     * Processes the response object created by the SoapClient and extracts the student data
     * @param type $responseobject The object generated by SoapClient's call to the web service.
     * @param array $uoos List of UOO ID's to query
     * @param string $grade Grade to request
     * @return object $data The associated student grade data.
     */
    private function extract_results_from_response($responseobject, $uoos, $grade) {
        $data = array();
        $xml = new SimpleXMLElement($responseobject->any);
        foreach ($xml->children() as $child) {
            $uoo_id = null;
            $person_id = null;
            $mark = null;
            foreach ($child->children() as $attribute => $value) {
                if ($attribute == 'UOO_ID') {
                    $uoo_id = (string)$value;
                } else if ($attribute == 'PERSON_ID') {
                    $person_id = (int)$value;
                } else if ($attribute == 'MARK') {
                    $mark = (float)$value;
                }
            }
            $data[$uoos[$uoo_id]][$person_id] = array('GRADE' => $grade, 'MARK' => $mark);
        }

        return $data;
    }
}
