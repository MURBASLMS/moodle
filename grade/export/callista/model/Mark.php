<?php

/**
 * The model object for the result a student has achieved in a particular unit. E.g. student x achieved a 95 (HD) in STAT100.
 *
 * @copyright  2012 onwards University of New England
 * @author anoble2
 */
class Mark {
    
    //An id generated by a sequence in the Moodle database.
    private $id;
    
    //The id number of the batch this mark is a part of.
    private $batchid;
    
    //The id number of the student who achieved this mark.
    private $studentnumber;
    
    //The student's first name. Used by views.
    private $studentfirstname;
    
    //The student's surname, which gets used for data validation by Callista's web service. Used by views and web service.
    private $studentsurname;
    
    //The mark the student has achieved as calculated by Moodle's gradebook.
    private $calculatedmark;

    //The mark the student has achieved as calculated by Moodle's gradebook after rounding.
    private $roundedmark;

    //The grade the student has achieved as calculated by Moodle's gradebook after rounding.
    private $roundedgrade;

    //A mark that will override the $calculatedmark. Leave this as null to use the $calculatedmark.
    private $markoverride;
    
    //If a mark has been manually overridden vs automatically overridden
    private $markoverridemanual;
    
    //If a mark has been manually overridden and shouldn't be changed based on rounding rules
    private $markoverrideforced;

    //The alphabetic grade (HD, D, C, etc) the student achieved, derived from the calculated mark and the grading scale Moodle uses
    //for the unit.
    private $derivedgrade;
    
    //A grade that will override the $derivedgrade. Leave this as null to use the $derivedgrade.
    private $gradeoverride;
    
    //If a grade has been manually overridden vs automatically overridden
    private $gradeoverridemanual;
    
    //If a grade has been manually overridden and shouldn't be changed based on rounding rules
    private $gradeoverrideforced;

    //An id number unique within the batch for this mark.
    private $outcomeid;
    
    //The code for the UNE course (degree) that the student is enrolled in. E.g. 'BA'.
    private $coursecode;
    
    //The code for the unit that the student achieved this mark in. E.g. 'STAT100' as needed by Callista. Note this is different 
    //from the Batch class's $unitcode attribute.
    private $unitcode;
    
    //The offering the student is enrolled in. E.g. ON = on campus, OF = off campus, OL = online. Used by views.
    private $offering;
    
    //Whether or not this mark was stored in Callista.
    private $outcomeloadedflag;
    
    //A numeric code corresponding to the $outcomeloadmessage, generated by Callista's web service.
    private $outcomeloadmessagenumber;
    
    //A message indicating the mark was successfully loaded into Callista, or explaining why the mark failed to be loaded. 
    private $outcomeloadmessage;
    
    //The Batch object this mark is part of.
    private $batch;

     // Grade boundaries for calculating the Grade override if auto overridden.
    private $gradeboundaries = array(
                                      50 => array('low' =>  0, 'letter' =>  'N'),
                                      60 => array('low' => 50, 'letter' =>  'P'),
                                      70 => array('low' => 60, 'letter' =>  'C'),
                                      80 => array('low' => 70, 'letter' =>  'D'),
                                     100 => array('low' => 80, 'letter' => 'HD')
    );

    // Value for storing "No mark" which will be given to Callista as NULL
    const NO_MARK = 1000;

    // String for "No mark"
    const NO_MARK_STRING = 'No mark';

    // Q Grade Error number for generating an error message.
    const QGRADE_ERRORNO = 99999;

    // Q Grade overridden grade
    const QGRADE_GRADE = 'Q';

    // Q Grade grade
    const QGRADE = 'Q';

    function __construct($id = null,
                         $batchid = null,
                         $studentnumber = null,
                         $studentfirstname = null,
                         $studentsurname = null,
                         $calculatedmark = null,
                         $markoverride = null,
                         $derivedgrade = null,
                         $gradeoverride = null,
                         $outcomeid = null,
                         $courseCode = null,
                         $unitCode = null,
                         $offering = null,
                         $outcomeloadedflag = null,
                         $outcomeloadmessagenumber = null,
                         $outcomeloadmessage = null,
                         $markoverridemanual = true,
                         $gradeoverridemanual = true) {
        $this->id = $id;
        $this->batchid = $batchid;
        $this->studentnumber = $studentnumber;
        $this->calculatedmark = $calculatedmark;
        $this->markoverride = $markoverride;
        $this->derivedgrade = $derivedgrade;
        $this->gradeoverride = $gradeoverride;
        $this->outcomeid = $outcomeid;
        $this->coursecode = $courseCode;
        $this->unitcode = $unitCode;
        $this->outcomeloadedflag = $outcomeloadedflag;
        $this->outcomeloadmessagenumber = $outcomeloadmessagenumber;
        $this->outcomeloadmessage = $outcomeloadmessage;
        $this->studentfirstname = $studentfirstname;
        $this->studentsurname = $studentsurname;
        $this->offering = $offering;
        $this->markoverridemanual = $markoverridemanual;
        $this->markoverrideforced = 0;
        $this->gradeoverridemanual = $gradeoverridemanual;
        $this->gradeoverrideforced = 0;
    }

    public function get_id() {
        return $this->id;
    }

    public function set_id($id) {
        $this->id = $id;
    }

    public function get_batchid() {
        return $this->batchid;
    }

    public function set_batchid($batchid) {
        $this->batchid = $batchid;
    }

    public function get_studentnumber() {
        return $this->studentnumber;
    }

    public function set_studentnumber($studentnumber) {
        $this->studentnumber = $studentnumber;
    }

    public function get_studentfirstname() {
        return $this->studentfirstname;
    }

    public function set_studentfirstname($studentfirstname) {
        $this->studentfirstname = $studentfirstname;
    }

    public function get_studentsurname() {
        return $this->studentsurname;
    }

    public function set_studentsurname($studentsurname) {
        $this->studentsurname = $studentsurname;
    }
    
    public function get_calculatedmark() {
        return $this->calculatedmark;
    }

    public function set_calculatedmark($calculatedmark) {
        $this->calculatedmark = $calculatedmark;
    }


    /**
     * This function runs the calculate rounded mark based on Moodle's grade so x.49 goes down and x.5 goes up.
     * Then calculates the rounded grade based on this for usage otherwise.
     */
    public function calculate_automatic_overrides() {
        $this->calculate_roundedmark();
        $markoverride = $this->get_markoverride(false);
        // If the mark override is null, don't auto-calculate rounded grade.
        if (empty($markoverride)) {
            return;
        }
        // If not override found for the mark, base off rounded mark.
        if (!isset($markoverride)) {
            $markoverride = $this->get_roundedmark();
        }
        foreach ($this->gradeboundaries as $high => $grade) {
            if ($markoverride < $high && $markoverride >= $grade['low']) {
                $this->set_roundedgrade($grade['letter']);
                break;
            }
        }
    }

    /**
     * This function runs the calculate rounded mark based on Moodle's grade so x.49 goes down and x.5 goes up.
     * If there is no override mark and a different integer value, it will set and use the rounded mark to calculate
     * and set if the auto overridden grade is a different grade to the default grade.
     */
    public function apply_automatic_overrides() {
        $this->calculate_roundedmark();

        // Auto calculate the overridden mark if one hasn't been manually applied.
        if (strlen($this->get_markoverride()) == 0 && floatval($this->get_calculatedmark()) != floatval($this->get_roundedmark())) {
            $this->set_markoverride($this->get_roundedmark());

            // Auto calculate the overridden grade if one doesn't been manually applied.
            if (strlen($this->get_gradeoverride()) == 0) {
                foreach ($this->gradeboundaries as $high => $grade) {
                    if ($this->get_markoverride() < $high && $this->get_markoverride() >= $grade['low']) {

                        // Override default grade only if different to one based on the Mark.
                        $this->set_roundedgrade($grade['letter']);
                        if ($this->get_derivedgrade() != $grade['letter']) {
                            $this->set_gradeoverride($grade['letter']);
                        }
                        break;
                    }
                }
            }
        }
    }

    // Calculate the rounded mark by rounding to an integer based on mark.
    public function calculate_roundedmark() {
        $roundedmark = round($this->calculatedmark, 0);
        $this->set_roundedmark($roundedmark);
    }

    public function get_roundedmark() {
        return $this->roundedmark;
    }

    public function set_roundedmark($roundedmark) {
        $this->roundedmark = $roundedmark;
    }

    public function get_roundedgrade() {
        return $this->roundedgrade;
    }

    public function set_roundedgrade($roundedgrade) {
        $this->roundedgrade = $roundedgrade;
    }

    /**
     * Converts given grade override to handle how special 'No mark' is returned.
     * @param float $nomarkstring Whether to return nomarkstring if that integer value
     * @param Boolean $nomarkstring Whether to return nomarkstring correct value or string
     * @param Boolean $nomarknull Whether to return null if nomark integer or string matches
     * @return mixed The mark override the student has been given for Callista.
     */
    public function convert_markoverride($markoverride, $nomarkstring = true, $nomarknull = false) {
        if (intval($markoverride) === Mark::NO_MARK || $markoverride === Mark::NO_MARK_STRING) {
            if ($nomarkstring && !$nomarknull) {
                return Mark::NO_MARK_STRING;
            }
            if ($nomarknull) {
                return null;
            }
            return Mark::NO_MARK;
        }
        
        // Convert 0 to null to handle numeric database field as required.
        if ($markoverride == 0) {
            return null;
        }

        return $markoverride;
    }

    /**
     * Retrieves the given mark override, this handles how special 'No mark' is returned.
     * @param Boolean $nomarkstring Whether to return nomarkstring if that integer value
     * @param Boolean $nomarknull Whether to return null if nomark integer or string matches
     * @return mixed The mark override the student has been given for Callista.
     */
    public function get_markoverride($nomarkstring = true, $nomarknull = false) {
        $this->markoverride = $this->convert_markoverride($this->markoverride, $nomarkstring, $nomarknull);
        if ($this->markoverride !== null) {
            if (is_numeric($this->markoverride)) {
                return floatval($this->markoverride);
            }
        }
        return $this->markoverride;
    }

    public function set_markoverride($markoverride) {
        $this->markoverride = $this->convert_markoverride($markoverride);
    }
    
    public function get_markoverridemanual() {
        return $this->markoverridemanual ? 1 : 0;
    }
    
    public function set_markoverridemanual($status) {
        $this->markoverridemanual = $status;
    }
    
    public function get_markoverrideforced() {
        return $this->markoverrideforced ? 1 : 0;
    }

    public function set_markoverrideforced($status) {
        $this->markoverrideforced = $status;
    }

    /**
     * Retrieves the given mark override, or if there is no override, the calculated mark.
     * @param Boolean $nomarkstring Whether to return nomarkstring if that integer value
     * @param Boolean $nomarknull Whether to return null if nomark integer or string matches
     * @return mixed The mark the student is have recorded in Callista.
     */
    public function get_mark($nomarkstring = true, $nomarknull = false) {
        if($this->markoverride == null) {
            return floatval($this->calculatedmark);
        }
        return $this->get_markoverride($nomarkstring, $nomarknull);
    }

    public function get_derivedgrade() {
        return $this->derivedgrade;
    }

    public function set_derivedgrade($derivedgrade) {
        $this->derivedgrade = $derivedgrade;
    }

    public function get_gradeoverride() {
        return $this->gradeoverride;
    }

    public function set_gradeoverride($gradeoverride) {
        $this->gradeoverride = $gradeoverride;
    }
    
    public function get_gradeoverridemanual() {
        return $this->gradeoverridemanual ? 1 : 0;
    }
    
    public function set_gradeoverridemanual($status) {
        $this->gradeoverridemanual = $status;
    }
    
    public function get_gradeoverrideforced() {
        return $this->gradeoverrideforced ? 1 : 0;
    }

    public function set_gradeoverrideforced($status) {
        $this->gradeoverrideforced = $status;
    }

    /**
     * Retrieves the given grade override, or if there is no override, the derived grade (based on the calculated mark).
     * @return string The grade the student is to have recorded in Callista.
     */
    public function get_grade() {
        if($this->gradeoverride == null) {
            return $this->derivedgrade;
        }
        return $this->gradeoverride;
    }

    public function get_outcomeid() {
        return $this->outcomeid;
    }

    public function set_outcomeid($outcomeid) {
        $this->outcomeid = $outcomeid;
    }

    public function get_coursecode() {
        return $this->coursecode;
    }

    public function set_coursecode($courseCode) {
        $this->coursecode = $courseCode;
    }

    public function get_unitcode() {
        return $this->unitcode;
    }

    public function set_unitcode($unitCode) {
        $this->unitcode = $unitCode;
    }

    public function get_offering() {
        return $this->offering;
    }

    public function set_offering($offering) {
        $this->offering = $offering;
    }

    public function get_outcomeloadedflag() {
        return $this->outcomeloadedflag;
    }

    public function set_outcomeloadedflag($outcomeloadedflag) {
        $this->outcomeloadedflag = $outcomeloadedflag;
    }

    public function get_outcomeloadmessagenumber() {
        return $this->outcomeloadmessagenumber;
    }

    public function set_outcomeloadmessagenumber($outcomeloadmessagenumber) {
        $this->outcomeloadmessagenumber = $outcomeloadmessagenumber;
    }

    public function get_outcomeloadmessage() {
        return $this->outcomeloadmessage;
    }

    public function set_outcomeloadmessage($outcomeloadmessage) {
        $this->outcomeloadmessage = $outcomeloadmessage;
    }
    
    public function get_batch() {
        return $this->batch;
    }

    public function set_batch($batch) {
        $this->batch = $batch;
    }
    
    /**
     * Determines whether or not the mark was transferred successfully to Callista. The mark is considered to be successfully
     * transferred if the outcome loaded flag is set to 'TRUE' and there is no outcome load message.
     * @return boolean
     */
    public function response_was_successful() {
        return ($this->outcomeloadedflag == 'TRUE' &&
                ($this->outcomeloadmessage == null ||
                $this->outcomeloadmessage == ''));
    }
    
    /**
     * Determines whether or not the mark generated a warning when it was transferred to Callista. The mark is considered to have
     * generated a warning if the outcome loaded flag is set to 'TRUE' but there is an outcome load message.
     * @return boolean
     */
    public function response_was_warning() {
        return ($this->outcomeloadedflag == 'TRUE' &&
                $this->outcomeloadmessage != null &&
                $this->outcomeloadmessage != '');
    }
    
    /**
     * Determines whether or not the mark generated an error when it was transferred to Callista. The mark is considered to have
     * generated an error if the outcome loaded flag is not set to 'TRUE'.
     * @return boolean
     */
    public function response_was_error() {
        return ($this->outcomeloadedflag != 'TRUE' &&
                $this->outcomeloadedflag != null &&
                $this->outcomeloadedflag != '');
    }
    
    /**
     * Compares this mark with another based on student number and unit code.
     * @param Mark $mark The mark to compare this one to.
     * @return boolean True if the student numbers strictly match and the unit codes strictly match.
     */
    public function is_for_same_person_and_unit(Mark $mark) {
        return ($this->studentnumber === $mark->studentnumber &&
                $this->unitcode === $mark->unitcode);
    }
    
    /**
     * Used by find_late_enrolments_and_withdrawals() and separate_marks_into_categories() to compare Marks when using the 
     * array_udiff() function.
     * @param Mark $mark1 The first mark to compare.
     * @param Mark $mark2 The second mark to compare.
     * @return int -1 if $mark1's student number is less than $mark2's. 
     *             0 if they are equal.
     *             1 if $mark1's student number is greater than $mark2's.
     */
    public static function compare_by_person_and_unit(Mark $mark1, Mark $mark2) {
        $u1 = $mark1->get_unitcode();
        $u2 = $mark2->get_unitcode();
        if($u1 < $u2) {
            return -1;
        } else if($u1 > $u2) {
            return 1;
        } else {
            $s1 = $mark1->get_studentnumber();
            $s2 = $mark2->get_studentnumber();
            if($s1 < $s2) {
                return -1;
            } else if($s1 > $s2) {
                return 1;
            } else {
                return 0;
            }
        }
    }
}
