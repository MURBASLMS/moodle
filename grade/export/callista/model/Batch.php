<?php

/**
 * The model object for a batch of marks that can be uploaded to Callista.
 *
 * @copyright  2012 onwards University of New England
 * @author anoble2
 */
class Batch {
    //The value for the status attribute that indicates the batch has values saved in the Moodle database but is not yet ready to
    //be uploaded to Callista.
    const STATUS_INITIAL = 3;
    
    //The value for the status attribute that indicates the batch has been stored in the queue but has not yet been uploaded to Callista.
    const STATUS_QUEUED = 2;
    
    //The value for the status attribute that indicates the batch is being uploaded to Callista.
    const STATUS_SENDING = 1;
    
    //The value for the status attribute that indicates the entire batch has been successfully uploaded to Callista.
    const STATUS_SUCCESS = null;
    
    //The value for the status attribute that indicates the batch was uploaded but that individual marks had errors.
    const STATUS_DATA_ERROR = -1;
    
    //The value for the status attribute that indicates the batch was not uploaded because of some error.
    const STATUS_GENERAL_ERROR = -2;
    
    //An id generated by a sequence in the Moodle database.
    private $id;
    
    //Moodle's id number for the UNE unit.
    private $courseid;
    
    //Moodle's short name for the unit, e.g. STAT100 TRIMESTER 3 2012. Note this is different to the Mark class's $unitcode.
    private $unitcode;
    
    //The alternate code for the teaching period these marks were achieved in, as found in the Callista database. E.e. T2 for Trimester 2.
    private $teachingperiodalternatecode;
    
    //The alternate code for the acadmic calendar teaching period these marks were achieved in. E.g. 2011, 2012, etc.
    private $academicyear;
    
    //The status of the batch. Should hold one of the STATUS_* constants defined above.
    private $status;
    
    //The username of the whoever is uploading this batch.
    private $loadedbyusername;
    
    //The time when this batch was last written to the database, measured in seconds since the unix epoch.
    private $timewhensaved;
    
    //The time when this batch was queued, measured in seconds since the unix epoch.
    private $timewhenqueued;
    
    //The xml that was sent to the Callista web service.
    private $generatedxml;
    
    //The time when this batch of marks was sent to Callista, measured in seconds since the unix epoch.
    private $timewhensent;
    
    //The xml that Callista's web service replied with.
    private $resultsxml;
    
    //Whether or not the batch was loaded by the Callista web service.
    private $batchloadedflag;
    
    //The web service's text description of the call's success or failure.
    private $batchmessagetext;
    
    //The exception message if there's an error attempting to access the web service.
    private $generalerrormessage;
    
    //An array of Marks objects that make up this batch.
    private $marks;
    
    function __construct($id = null, 
                         $courseid, 
                         $unitcode, 
                         $teachingperiodalternatecode, 
                         $academicyear, 
                         $status, 
                         $loadedbyusername, 
                         $timewhensaved,
                         $timewhenqueued, 
                         $generatedxml, 
                         $timewhensent, 
                         $resultsxml, 
                         $batchloadedflag = '', 
                         $batchmessagetext = '', 
                         $generalerrormessage = '') {
        $this->id = $id;
        $this->courseid = $courseid;
        $this->unitcode = $unitcode;
        $this->teachingperiodalternatecode = $teachingperiodalternatecode;
        $this->academicyear = $academicyear;
        $this->status = $status;
        $this->loadedbyusername = $loadedbyusername;
        $this->timewhensaved = $timewhensaved;
        $this->timewhenqueued = $timewhenqueued;
        $this->generatedxml = $generatedxml;
        $this->timewhensent = $timewhensent;
        $this->resultsxml = $resultsxml;
        $this->batchloadedflag = $batchloadedflag;
        $this->batchmessagetext = $batchmessagetext;
        $this->generalerrormessage = $generalerrormessage;
    }

    public function get_id() {
        return $this->id;
    }

    public function set_id($id) {
        $this->id = $id;
    }

    public function get_courseid() {
        return $this->courseid;
    }

    public function set_courseid($courseid) {
        $this->courseid = $courseid;
    }

    public function get_unitcode() {
        return $this->unitcode;
    }

    public function set_unitcode($unitcode) {
        $this->unitcode = $unitcode;
    }

    public function get_status() {
        return $this->status;
    }

    public function set_status($status) {
        $this->status = $status;
    }
    
    public function get_timewhensaved() {
        return $this->timewhensaved;
    }

    public function set_timewhensaved($timewhensaved) {
        $this->timewhensaved = $timewhensaved;
    }

    public function get_timewhenqueued() {
        return $this->timewhenqueued;
    }

    public function set_timewhenqueued($timewhenqueued) {
        $this->timewhenqueued = $timewhenqueued;
    }

    public function get_generatedxml() {
        return $this->generatedxml;
    }

    public function set_generatedxml($generatedxml) {
        $this->generatedxml = $generatedxml;
    }

    public function get_timewhensent() {
        return $this->timewhensent;
    }

    public function set_timewhensent($timewhensent) {
        $this->timewhensent = $timewhensent;
    }

    public function get_resultsxml() {
        return $this->resultsxml;
    }

    public function set_resultsxml($resultsxml) {
        $this->resultsxml = $resultsxml;
    }

    public function get_batchloadedflag() {
        return $this->batchloadedflag;
    }

    public function set_batchloadedflag($batchloadedflag) {
        $this->batchloadedflag = $batchloadedflag;
    }

    public function get_batchmessagetext() {
        return $this->batchmessagetext;
    }

    public function set_batchmessagetext($batchmessagetext) {
        $this->batchmessagetext = $batchmessagetext;
    }

    public function get_generalerrormessage() {
        return $this->generalerrormessage;
    }

    public function set_generalerrormessage($generalerrormessage) {
        $this->generalerrormessage = $generalerrormessage;
    }
    public function get_teachingperiodalternatecode() {
        return $this->teachingperiodalternatecode;
    }

    public function set_teachingperiodalternatecode($teachingperiodalternatecode) {
        $this->teachingperiodalternatecode = $teachingperiodalternatecode;
    }

    public function get_academicyear() {
        return $this->academicyear;
    }

    public function set_academicyear($academicyear) {
        $this->academicyear = $academicyear;
    }

    public function get_loadedbyusername() {
        return $this->loadedbyusername;
    }

    public function set_loadedbyusername($loadedbyusername) {
        $this->loadedbyusername = $loadedbyusername;
    }

    public function get_marks() {
        return $this->marks;
    }

    /**
     * Sets the given array of marks as this batch's marks. Each mark's batchid
     * attribute is set to this batch's id.
     * @param arrat $marks The array of Marks to set this batch's marks to.
     */
    public function set_marks($marks) {
        foreach ($marks as $mark) {
            $mark->set_batchid($this->id);
        }
        $this->marks = $marks;
    }
}

?>
